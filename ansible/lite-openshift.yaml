---
# Copyright (c) 2016, Department for Business, Innovation and Skills
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL BIS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

- hosts: all
  tasks:
  - name: Detecting Operating System
    stat:
      path: /run/ostree-booted
    register: ostree_booted
  - set_fact:
      l_is_atomic: "{{ ostree_booted.stat.exists }}"
  - set_fact:
      l_is_containerized: "{{ (l_is_atomic | bool) or (containerized | default(false) | bool) }}"
  - name: Enable rhel 7 server extras rpms
    action: command subscription-manager repos --enable=rhel-7-server-extras-rpms
    when: not l_is_atomic | bool
    become: yes
  - name: Install Cockpit
    yum: name=cockpit state=latest
    when: not l_is_atomic | bool
    become: yes
  - name: Start Cockpit
    service: name=cockpit state=started enabled=yes
    become: yes
  - name: Create root ssh key on master
    command: ssh-keygen -f /root/.ssh/id_rsa -N '' creates=/root/.ssh/id_rsa
    when: inventory_hostname == groups['masters'][0]
    become: yes
  - name: Copy master root public key
    command: cat /root/.ssh/id_rsa.pub
    register: copy_master
    when: inventory_hostname == groups['masters'][0]
    become: yes
  - name: Register master root public key
    set_fact:
      root_pub_key: "{{ copy_master.stdout }}"
    when: copy_master.changed
  - name: Check authorized_keys
    command: cat /root/.ssh/authorized_keys
    register: authorized_keys
    become: yes
  - name: Authorize master root public key
    shell: >
      echo "{{ hostvars[groups['masters'][0]]['root_pub_key'] }}" >> /root/.ssh/authorized_keys
    when: authorized_keys.stdout.find("{{ hostvars[groups['masters'][0]]['root_pub_key'] }}") == -1
    become: yes

- include: ../../../openshift-ansible/playbooks/common/openshift-cluster/config.yml
  vars:
    g_etcd_hosts:   "{{ groups.etcd | default([]) }}"
    g_lb_hosts:     "{{ groups.lb | default([]) }}"
    g_master_hosts: "{{ groups.masters | default([]) }}"
    g_new_master_hosts: "{{ groups.new_masters | default([]) }}"
    g_node_hosts:   "{{ groups.nodes | default([]) }}"
    g_new_node_hosts: "{{ groups.new_nodes | default([]) }}"
    g_nfs_hosts:   "{{ groups.nfs | default([]) }}"
    g_all_hosts:    "{{ g_master_hosts | union(g_node_hosts) | union(g_etcd_hosts)
                        | union(g_lb_hosts) | union(g_nfs_hosts)
                        | union(g_new_node_hosts)| union(g_new_master_hosts)
                        | default([]) }}"
    openshift_cluster_id: "{{ cluster_id | default('default') }}"
    openshift_debug_level: "{{ debug_level | default(2) }}"
    openshift_deployment_type: "{{ deployment_type }}"

- hosts: all
  tasks:
  - name: Accept tcp:9090 for Cockpit
    command: >
      iptables -A OS_FIREWALL_ALLOW -p tcp -m state --state NEW -m tcp --dport
      9090 -j ACCEPT
    become: yes
  - name: Save iptables rules
    shell: iptables-save > /etc/sysconfig/iptables
    become: yes
  - name: Set the master schedulable
    command: oadm manage-node 10.100.100.21 --schedulable=true
    when: "'master' in group_names"
    become: yes
